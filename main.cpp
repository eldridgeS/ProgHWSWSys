// Updated by Rudranshu Datta
// March 2024
// Updated by Tom Collins
// October 2024
// Homework 3: ECE 2035
// Copyright 2024

#include "mbed.h"
#include "Nav_Switch.h"
#include "uLCD_4DGL.h"
#include <cstdio>

Nav_Switch myNav(p12, p15, p14, p16, p13); // initialize nav switch
uLCD_4DGL uLCD(p9, p10, p11); // initialize uLCD display
BusOut mbedleds(LED1, LED2, LED3, LED4); // initialize LEDs
DigitalIn button1(p21);                 // Pushbuttons (pin)
DigitalIn button2(p22);
DigitalIn button3(p23);
DigitalIn button4(p24);
PwmOut speaker(p25); 
AnalogOut DACout(p18);

int hardware_init()
{    
    //uLCD.baudrate(600000);
    //pc.baud(115200);
    // Initialize pushbuttons
    button1.mode(PullUp); 
    button2.mode(PullUp);
    button3.mode(PullUp);
    button4.mode(PullUp);
    return 0;
}

// Constants for circle movement
const int circle_size = 15;
const int screen_width = 128;
const int screen_height = 128;

// Current position of the circle
int x = screen_width / 2;
int y = screen_height / 2;

// Current color of the circle
int circle_color = 0;

// Array of possible circle colors
int colors[] = {BLUE, RED, GREEN, WHITE};

// Draw the circle at its current position and color
void draw_circle()
{
    uLCD.filled_circle(x, y, circle_size, colors[circle_color]);
}

void draw_circle_blank()
{
    uLCD.filled_circle(x, y, circle_size, BLACK);
}

void draw_rectangle()
{
    uLCD.filled_rectangle(x-15, y-15, x+15, y+15, colors[circle_color]);
    // printf("drawing rect\n");
}

void draw_rectangle_blank()
{
    uLCD.filled_rectangle(x-15, y-15,x+15, y+15, BLACK);
}

void draw_bomb() {
   static int new_piskel_data[289] = 
    {
        0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffffff, 0xffad15, 0xffad15, 0xffad15, 0xffad15, 0xffad15, 0xffad15, 0xffad15, 
    0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0xffde00, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffad15, 0xffad15, 0xffad15, 0xffde00, 0xffde00, 0xffad15, 
    0x000000, 0x000000, 0xffde00, 0xffde00, 0xffde00, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffad15, 0xffad15, 0xffde00, 0xffde00, 0xffad15, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffad15, 0xffad15, 0xffde00, 0xffad15, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffde00, 0x000000, 0xffad15, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 
    0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 
    0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
    0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
    0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
    0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
    0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
    0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 
    0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x000000
    };

   uLCD.BLIT(x,y, 17,17, new_piskel_data);
}

void draw_bomb_blank() {
    uLCD.filled_rectangle(x,y, x+17,y+17, BLACK);
}

void draw_buzz_blank() {
    uLCD.filled_rectangle(x,y, x+32,y+35, BLACK);
}

void draw_buzz()
{
    int new_piskel_data[1120] = {
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x022c55, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xffffff, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x022c55, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x022c55, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x022c55, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0xffffff, 0xffffff, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x022c55, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x022c55, 0xffffff, 0xb3a46a, 0xb3a46a, 0x022c55, 0xffffff, 0xffffff, 0x022c55, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x022c55, 0xffffff, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xffffff, 0x022c55, 0xffffff, 0x022c55, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xffffff, 0xffffff, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0xffffff, 0xffffff, 0xffffff, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x022c55, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0xb3a46a, 0x022c55, 0x022c55, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xb3a46a, 0xb3a46a, 0xb3a46a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0xb3a46a, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x022c55, 0x022c55, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
    };

   uLCD.BLIT(x,y, 32,35, new_piskel_data);        
}


int main()
{

    printf("Program Start\nUse this terminal to debug\n"); //always put a \n at the end to clear out the buffer


    wait_us(2*100000);
    // Initialize the display and draw the circle
    uLCD.background_color(BLACK);
    uLCD.cls();
    uLCD.baudrate(3000000);
    hardware_init();

    void (*draw)();
    void (*draw_blank)();

    draw = draw_circle;
    draw_blank = draw_circle_blank;
    short mode = 0;

    short old_mode = mode;


    while (1) {

        
        if (mode == 1) {
            draw = draw_rectangle;
            draw_blank = draw_rectangle_blank;
        } 
        else if (mode == 2) {
            draw = draw_bomb;
            draw_blank = draw_bomb_blank;
        }

        else if (mode == 3) {
            draw = draw_buzz;
            draw_blank = draw_buzz_blank;
        }
        
        else {
            draw = draw_circle;
            draw_blank = draw_circle_blank;
        }
        
        // Read the nav switch and move the circle accordingly
        if (myNav.up()) {
            (*draw_blank)();
            y = max(y - 5, circle_size);
            mbedleds = 0x01;

            //add print statement here to print to terminal that you are moving up
            
            (*draw)();
            // uLCD.cls();
        } else if (myNav.down()) {
           (*draw_blank)();
            y = min(y + 5, screen_height - circle_size);
            mbedleds = 0x02;
            // draw_circle_blank();

            //add print statement here to print to terminal that you are moving down

            (*draw)();
            // uLCD.cls();
        } else if (myNav.left()) {
            (*draw_blank)();
            x = max(x - 5, circle_size);
            mbedleds = 0x04;
            draw_circle_blank();

            //add print statement here to print to terminal that you are moving left

            (*draw)();
            // uLCD.cls();
        } else if (myNav.right()) {
            (*draw_blank)();
            x = min(x + 5, screen_width - circle_size);
            mbedleds = 0x08;
            draw_circle_blank();

            //add print statement here to print to terminal that you are moving right

            (*draw)();
            // uLCD.cls();
        } else if (myNav.center()) {
           (*draw_blank)();
            // Change the color of the circle on center button press
            circle_color = (circle_color + 1) % 4;
            mbedleds = 0x10;

            //add print statement here to print to terminal that you pressed the center button

            wait_us(500);
            (*draw)();
            // uLCD.cls();
        } else {
            (*draw)();
            wait_us(500);
            // mbedleds = ~mbedleds; // Flicker LEDs
            wait_us(500);
            // (*draw_blank)();
        }

        if (!button1) {

            old_mode = mode;

            mode = 0;

            // printf("Mode changed from %d to %d\n", old_mode, mode);
            (*draw_blank)();
        }
        else if (!button2) {
            old_mode = mode;
            
            mode = 1;

            // printf("Mode changed from %d to %d\n", old_mode, mode);
            (*draw_blank)();

        }
        else if (!button3) {
            old_mode = mode;
            
            mode = 2;

            // printf("Mode changed from %d to %d\n", old_mode, mode);
            (*draw_blank)();

        }
        else if (!button4) {
            old_mode = mode;
            
            mode = 3;

            // printf("Mode changed from %d to %d\n", old_mode, mode);
            (*draw_blank)();

        }
        else {
            mode = mode;
            
        }
    }
}
